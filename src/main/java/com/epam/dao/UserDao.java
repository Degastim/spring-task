package com.epam.dao;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.epam.entity.User;
import com.epam.storage.Storage;

public class UserDao {
    private static final Logger logger = LogManager.getLogger();
    private Storage storage;
    private long autogeneratedUserId = 1;

    public void setStorage(Storage storage) {
        this.storage = storage;
    }

    public User getUserById(long userId) {
        logger.info("Get user by id:" + userId);
        return storage.getUserMap().get(userId);
    }

    public Optional<User> getUserByEmail(String email) {
        logger.info("Get user by email:" + email);
        return storage.getUserMap().values().stream().filter(o -> o.getEmail().equals(email)).findFirst();
    }

    public List<User> getUsersByName(String name, int pageSize, int pageNum) {
        logger.info("Get user by name:" + name + ",page size:" + pageSize + ",page number:" + pageNum);
        return storage.getUserMap().values().stream().filter(o -> o.getName().contains(name))
                .skip((long) pageSize * (pageNum - 1)).limit(pageSize).collect(Collectors.toList());
    }

    public User create(User user) {
        user.setId(autogeneratedUserId);
        logger.info("Input user in storage. User:" + user);
        autogeneratedUserId++;
        String email = user.getEmail();
        boolean emailExist = storage.getUserMap().values().stream().anyMatch(o -> o.getEmail().equals(email));
        if (emailExist) {
            logger.warn("Attempt to enter a user with an existing mail.");
            throw new IllegalStateException("This email exist:" + email);
        }
        storage.getUserMap().put(user.getId(), user);
        return user;
    }

    public User update(User user) {
        logger.info("Update user:" + user);
        storage.getUserMap().put(user.getId(), user);
        return user;
    }

    public boolean delete(long userId) {
        logger.info("Delete user by id:" + userId);
        User user = storage.getUserMap().remove(userId);
        return user != null;
    }
}
