package com.epam.dao;

import java.util.List;
import java.util.stream.Collectors;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.epam.entity.Event;
import com.epam.entity.Ticket;
import com.epam.entity.User;
import com.epam.storage.Storage;

import lombok.Setter;

public class TicketDao {
    private static final Logger logger = LogManager.getLogger();
    @Setter
    private Storage storage;
    private long autogeneratedTickedId = 1;

    public Ticket create(Ticket ticket) {
        ticket.setId(autogeneratedTickedId);
        autogeneratedTickedId++;
        logger.info("Input ticket in storage.Ticket" + ticket);
        storage.getTicketMap().put(ticket.getId(), ticket);
        return ticket;
    }

    public boolean delete(long ticketId) {
        logger.info("Delete ticket from storage.Ticket id" + ticketId);
        Ticket ticket = storage.getTicketMap().remove(ticketId);
        return ticket != null;
    }

    public List<Ticket> getBookedTickets(User user, int pageSize, int pageNum) {
        logger.info("Get all booked tickets for specified user. User " + user + " page size" + pageSize
                + "and Page number" + pageNum);
        return storage.getTicketMap().values().stream().filter(o -> o.getUserId() == user.getId())
                .skip((long) pageSize * (pageNum - 1)).limit(pageSize).collect(Collectors.toList());
    }

    public List<Ticket> getBookedTickets(Event event, int pageSize, int pageNum) {
        logger.info("Get all booked tickets for specified event. Event " + event + " page size" + pageSize
                + "and Page number" + pageNum);
        return storage.getTicketMap().values().stream().filter(o -> o.getEventId() == event.getId())
                .skip((long) pageSize * (pageNum - 1)).limit(pageSize).collect(Collectors.toList());
    }

    public boolean isPlaceBooked(long eventId, int place) {
        logger.info("Checking if a place is booked for an event. Event id:" + eventId + "place:" + place);
        return storage.getTicketMap().values().stream()
                .anyMatch(o -> o.getEventId() == eventId && o.getPlace() == place);
    }
}
